
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND CHAR COLON COMMA COMPARE C_CHAR C_FLOAT C_INT DIFFERENT DIVIDE DO ELSE EQUALS FLOAT FOR FUNCTION GREATER GREATER_EQ ID IF INT LBRACK LCURLY LESSER LESSER_EQ LPAREN MAIN MEDIA MESSAGE MINUS MODA OR PLOT PLUS PROGRAM RBRACK RCURLY READ REGRESION RETURN RPAREN SEMI THEN TIMES TO VARIANZA VARS VOID WHILE WRITEprogram_structure : PROGRAM initiate ID addfun addprog SEMI declare_var changescope functions MAIN changeback LPAREN RPAREN LCURLY statutes RCURLY endfunc\n                         | PROGRAM initiate ID addfun addprog SEMI declare_var changescope MAIN changeback LPAREN RPAREN LCURLY statutes RCURLY endfunc\n                         | PROGRAM initiate ID addfun addprog SEMI changescope functions MAIN changeback LPAREN RPAREN LCURLY statutes RCURLY endfunc\n                         | PROGRAM initiate ID addfun addprog SEMI MAIN changeback LPAREN RPAREN LCURLY statutes RCURLY endfuncaddprog :initiate :addfun :changescope :changeback :type : INT\n            | FLOAT\n            | CHARdeclare_var : VARS multitypesmultitypes : type addtype COLON multivars SEMI\n                  | type addtype COLON multivars SEMI multitypesaddtype :multivars : ID addvar\n                 | ID addvar COMMA multivars\n                 | dimvars addvard\n                 | dimvars addvard COMMA multivarsdimvars : ID LBRACK expr RBRACKaddvar :addvard :return_type : INT\n                   | FLOAT\n                   | CHAR\n                   | VOIDdeclare_fun : FUNCTION return_type addtype ID addfun LPAREN RPAREN\n                   | FUNCTION return_type addtype ID addfun LPAREN paramstatus params paramstatus RPARENfunctions : declare_fun declare_var LCURLY statutes RCURLY endfunc\n                 | declare_fun LCURLY statutes RCURLY endfunc\n                 | declare_fun declare_var LCURLY statutes RCURLY endfunc functions\n                 | declare_fun LCURLY statutes RCURLY endfunc functionsendfunc :paramstatus :params : type addtype COLON multivars\n              | type addtype COLON multivars SEMI paramsstatutes : assign\n                | assign statutes\n                | call_void\n                | call_void statutes\n                | returning\n                | reading\n                | reading statutes\n                | writing\n                | writing statutes\n                | decision\n                | decision statutes\n                | conditional\n                | conditional statutes\n                | nonconditional\n                | nonconditional statutesassign : ID pushid EQUALS exprs assignment SEMI\n              | ID pushid LBRACK exprs RBRACK verif EQUALS exprs assignment SEMIassignment :call_void : ID call exprp confirm SEMI\n                 | ID call LPAREN RPAREN confirm SEMI\n                 | special2 exprp sconfirm2 SEMIspecial2 : REGRESION\n                | PLOTsconfirm2 :returning : RETURN LPAREN exprs returnquad RPAREN SEMIreturnquad :reading : READ LPAREN read_opt RPAREN SEMIread_opt : expr readquad\n                | expr readquad COMMA read_optreadquad :writing : WRITE LPAREN write_opt RPAREN SEMIwrite_opt : MESSAGE writequad1\n                 | MESSAGE writequad1 COMMA write_opt\n                 | exprs writequad2\n                 | exprs writequad2 COMMA write_optwritequad1 :writequad2 :decision : IF LPAREN logic RPAREN ifquad THEN LCURLY statutes RCURLY filljump\n                | IF LPAREN logic RPAREN ifquad THEN LCURLY statutes RCURLY ELSE elsequad LCURLY statutes RCURLY filljumpifquad :elsequad :filljump :conditional : WHILE loopquad LPAREN logic RPAREN whilequad DO LCURLY statutes RCURLY endquadloopquad :whilequad :endquad :logic : relation AND relation logicquad\n             | relation OR relation logicquad\n             | relationrelation : exprs GREATER exprs logicquad\n                | exprs GREATER_EQ exprs logicquad\n                | exprs LESSER exprs logicquad\n                | exprs LESSER_EQ exprs logicquad\n                | exprs COMPARE exprs logicquad\n                | exprs DIFFERENT exprs logicquadlogicquad :nonconditional : FOR exprs forquad1 EQUALS exprs forquad2 TO exprs forquad3 DO LCURLY statutes RCURLY forquad4forquad1 :forquad2 :forquad3 :forquad4 :exprs : expr pams\n             | expr pams COMMA exprs\n             | exprp pams \n             | exprp pams COMMA exprsexprp : LPAREN pushop exprs RPAREN popop popop :expr : expr PLUS pushop term quad1 \n            | expr MINUS pushop term quad1\n            | term quad1term : term TIMES pushop factor quad2\n            | term DIVIDE pushop factor quad2\n            | factor quad2quad1 :quad2 :pushop :factor : C_INT pushint\n              | MINUS C_INT pushintn\n              | C_FLOAT pushfloat\n              | MINUS C_FLOAT pushfloatn\n              | C_CHAR pushchar\n              | ID pushid\n              | ID pushid LBRACK expr RBRACK verif\n              | ID call LPAREN RPAREN confirm\n              | ID call exprp confirm\n              | special1 exprp sconfirm1special1 : MEDIA\n                | MODA\n                | VARIANZAsconfirm1 :pushid :pushint :pushintn :pushfloat :pushfloatn :pushchar :verif :call :pams :confirm :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,185,227,232,233,261,262,263,271,],[0,-34,-4,-34,-34,-34,-2,-3,-1,]),'ID':([2,3,26,27,28,29,30,31,37,39,40,42,43,44,45,46,54,57,59,75,76,77,78,79,96,105,106,108,110,120,123,124,127,128,142,145,146,153,162,163,164,165,166,167,168,169,171,172,173,174,175,176,177,180,181,187,189,190,196,200,201,202,203,204,234,236,264,265,267,274,277,279,283,284,286,290,291,293,296,297,298,299,],[-6,4,47,-16,-24,-25,-26,-27,47,47,47,47,47,47,47,47,90,95,98,-113,90,90,90,90,47,90,90,-113,90,90,-113,-113,-113,-113,90,47,47,-58,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,-113,98,98,47,-56,-64,90,-68,90,90,-53,-57,90,47,90,47,98,-79,-54,-75,-83,-80,47,47,-98,-79,-94,-76,]),'SEMI':([4,5,6,74,82,83,84,86,87,88,89,90,97,98,99,107,109,122,125,126,129,130,131,132,133,134,135,137,141,143,149,151,152,156,158,178,179,182,183,194,197,198,199,216,217,218,219,220,221,223,224,228,229,230,237,253,254,255,256,257,258,268,272,278,282,],[-7,-5,7,-61,-136,-136,-111,-112,-129,-131,-133,-128,140,-22,-23,-137,153,-99,-101,-107,-130,-132,-110,-114,-116,-118,-119,-127,-17,-19,-55,196,-137,200,202,-115,-117,-137,-123,234,236,-104,238,-100,-111,-111,-102,-112,-112,-137,-122,-18,-21,-20,-103,-105,-106,-108,-109,-134,-121,-120,-55,283,288,]),'MAIN':([7,8,12,13,17,22,64,103,104,140,147,148,186,193,],[10,-8,23,24,-13,34,-34,-34,-31,-14,-30,-33,-15,-32,]),'VARS':([7,14,225,276,],[11,11,-28,-29,]),'FUNCTION':([7,8,9,12,17,64,103,104,140,147,186,],[-8,-8,15,15,-13,-34,-34,15,-14,15,-15,]),'LPAREN':([10,16,23,24,34,35,36,47,48,49,50,51,52,53,54,55,56,60,73,75,76,78,79,80,90,91,92,93,94,95,105,106,108,110,120,136,138,162,163,164,165,166,167,168,169,171,172,175,181,203,204,264,267,],[-9,32,-9,-9,-9,61,62,-135,75,76,77,78,79,-81,75,-59,-60,100,108,-113,75,75,75,120,-135,75,-124,-125,-126,-7,75,75,-113,75,75,181,184,75,75,75,75,75,75,75,75,75,75,75,-113,75,75,75,75,]),'INT':([11,15,140,184,226,288,],[19,28,19,-35,19,19,]),'FLOAT':([11,15,140,184,226,288,],[20,29,20,-35,20,20,]),'CHAR':([11,15,140,184,226,288,],[21,30,21,-35,21,21,]),'LCURLY':([14,17,25,58,101,102,140,144,186,225,242,266,276,285,287,289,],[26,-13,37,96,145,146,-14,190,-15,-28,265,274,-29,-78,291,293,]),'VOID':([15,],[31,]),'COLON':([18,19,20,21,33,260,270,],[-16,-10,-11,-12,59,-16,277,]),'RETURN':([26,37,39,40,42,43,44,45,46,96,145,146,153,190,196,200,202,234,236,265,274,279,283,284,286,290,291,293,296,297,298,299,],[49,49,49,49,49,49,49,49,49,49,49,49,-58,49,-56,-64,-68,-53,-57,49,49,-79,-54,-75,-83,-80,49,49,-98,-79,-94,-76,]),'READ':([26,37,39,40,42,43,44,45,46,96,145,146,153,190,196,200,202,234,236,265,274,279,283,284,286,290,291,293,296,297,298,299,],[50,50,50,50,50,50,50,50,50,50,50,50,-58,50,-56,-64,-68,-53,-57,50,50,-79,-54,-75,-83,-80,50,50,-98,-79,-94,-76,]),'WRITE':([26,37,39,40,42,43,44,45,46,96,145,146,153,190,196,200,202,234,236,265,274,279,283,284,286,290,291,293,296,297,298,299,],[51,51,51,51,51,51,51,51,51,51,51,51,-58,51,-56,-64,-68,-53,-57,51,51,-79,-54,-75,-83,-80,51,51,-98,-79,-94,-76,]),'IF':([26,37,39,40,42,43,44,45,46,96,145,146,153,190,196,200,202,234,236,265,274,279,283,284,286,290,291,293,296,297,298,299,],[52,52,52,52,52,52,52,52,52,52,52,52,-58,52,-56,-64,-68,-53,-57,52,52,-79,-54,-75,-83,-80,52,52,-98,-79,-94,-76,]),'WHILE':([26,37,39,40,42,43,44,45,46,96,145,146,153,190,196,200,202,234,236,265,274,279,283,284,286,290,291,293,296,297,298,299,],[53,53,53,53,53,53,53,53,53,53,53,53,-58,53,-56,-64,-68,-53,-57,53,53,-79,-54,-75,-83,-80,53,53,-98,-79,-94,-76,]),'FOR':([26,37,39,40,42,43,44,45,46,96,145,146,153,190,196,200,202,234,236,265,274,279,283,284,286,290,291,293,296,297,298,299,],[54,54,54,54,54,54,54,54,54,54,54,54,-58,54,-56,-64,-68,-53,-57,54,54,-79,-54,-75,-83,-80,54,54,-98,-79,-94,-76,]),'REGRESION':([26,37,39,40,42,43,44,45,46,96,145,146,153,190,196,200,202,234,236,265,274,279,283,284,286,290,291,293,296,297,298,299,],[55,55,55,55,55,55,55,55,55,55,55,55,-58,55,-56,-64,-68,-53,-57,55,55,-79,-54,-75,-83,-80,55,55,-98,-79,-94,-76,]),'PLOT':([26,37,39,40,42,43,44,45,46,96,145,146,153,190,196,200,202,234,236,265,274,279,283,284,286,290,291,293,296,297,298,299,],[56,56,56,56,56,56,56,56,56,56,56,56,-58,56,-56,-64,-68,-53,-57,56,56,-79,-54,-75,-83,-80,56,56,-98,-79,-94,-76,]),'RPAREN':([32,61,62,82,83,84,86,87,88,89,90,98,99,100,108,111,112,113,114,115,116,117,118,122,125,126,129,130,131,132,133,134,135,137,141,143,154,155,157,159,160,170,178,179,181,182,183,184,198,206,207,208,209,210,211,212,213,216,217,218,219,220,221,223,224,228,229,230,237,239,240,241,243,244,245,246,247,248,249,250,253,254,255,256,257,258,259,268,269,282,292,],[58,101,102,-136,-136,-111,-112,-129,-131,-133,-128,-22,-23,144,152,-63,156,-67,158,-73,-74,161,-86,-99,-101,-107,-130,-132,-110,-114,-116,-118,-119,-127,-17,-19,198,199,-65,-69,-71,214,-115,-117,223,-137,-123,225,-104,-93,-93,-93,-93,-93,-93,-93,-93,-100,-111,-111,-102,-112,-112,-137,-122,-18,-21,-20,-103,-66,-70,-72,-84,-85,-87,-88,-89,-90,-91,-92,-105,-106,-108,-109,-134,-121,-35,-120,276,-36,-37,]),'RCURLY':([38,39,40,41,42,43,44,45,46,63,65,66,67,68,69,70,71,139,153,191,192,196,200,202,231,234,236,238,273,279,280,283,284,286,290,294,295,296,297,298,299,],[64,-38,-40,-42,-43,-45,-47,-49,-51,103,-39,-41,-44,-46,-48,-50,-52,185,-58,232,233,-56,-64,-68,261,-53,-57,-62,279,-79,286,-54,-75,-83,-80,296,297,-98,-79,-94,-76,]),'EQUALS':([47,72,81,82,83,84,86,87,88,89,90,121,122,125,126,129,130,131,132,133,134,135,137,178,179,182,183,195,198,216,217,218,219,220,221,223,224,235,237,253,254,255,256,257,258,268,],[-128,105,-95,-136,-136,-111,-112,-129,-131,-133,-128,171,-99,-101,-107,-130,-132,-110,-114,-116,-118,-119,-127,-115,-117,-137,-123,-134,-104,-100,-111,-111,-102,-112,-112,-137,-122,264,-103,-105,-106,-108,-109,-134,-121,-120,]),'LBRACK':([47,72,90,98,135,],[-128,106,-128,142,180,]),'C_INT':([54,75,76,77,78,79,85,105,106,108,110,120,123,124,127,128,142,162,163,164,165,166,167,168,169,171,172,173,174,175,176,177,180,181,201,203,204,264,267,],[87,-113,87,87,87,87,129,87,87,-113,87,87,-113,-113,-113,-113,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,-113,87,87,87,87,87,]),'MINUS':([54,75,76,77,78,79,82,84,86,87,88,89,90,105,106,108,110,113,120,123,124,126,127,128,129,130,131,132,133,134,135,137,142,162,163,164,165,166,167,168,169,171,172,173,174,175,176,177,178,179,180,181,182,183,188,198,201,203,204,217,218,220,221,222,223,224,237,253,254,255,256,257,258,264,267,268,],[85,-113,85,85,85,85,124,-111,-112,-129,-131,-133,-128,85,85,-113,85,124,85,-113,-113,-107,-113,-113,-130,-132,-110,-114,-116,-118,-119,-127,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,-115,-117,85,-113,-137,-123,124,-104,85,85,85,-111,-111,-112,-112,124,-137,-122,-103,-105,-106,-108,-109,-134,-121,85,85,-120,]),'C_FLOAT':([54,75,76,77,78,79,85,105,106,108,110,120,123,124,127,128,142,162,163,164,165,166,167,168,169,171,172,173,174,175,176,177,180,181,201,203,204,264,267,],[88,-113,88,88,88,88,130,88,88,-113,88,88,-113,-113,-113,-113,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,-113,88,88,88,88,88,]),'C_CHAR':([54,75,76,77,78,79,105,106,108,110,120,123,124,127,128,142,162,163,164,165,166,167,168,169,171,172,173,174,175,176,177,180,181,201,203,204,264,267,],[89,-113,89,89,89,89,89,89,-113,89,89,-113,-113,-113,-113,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,-113,89,89,89,89,89,]),'MEDIA':([54,75,76,77,78,79,105,106,108,110,120,123,124,127,128,142,162,163,164,165,166,167,168,169,171,172,173,174,175,176,177,180,181,201,203,204,264,267,],[92,-113,92,92,92,92,92,92,-113,92,92,-113,-113,-113,-113,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,-113,92,92,92,92,92,]),'MODA':([54,75,76,77,78,79,105,106,108,110,120,123,124,127,128,142,162,163,164,165,166,167,168,169,171,172,173,174,175,176,177,180,181,201,203,204,264,267,],[93,-113,93,93,93,93,93,93,-113,93,93,-113,-113,-113,-113,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,-113,93,93,93,93,93,]),'VARIANZA':([54,75,76,77,78,79,105,106,108,110,120,123,124,127,128,142,162,163,164,165,166,167,168,169,171,172,173,174,175,176,177,180,181,201,203,204,264,267,],[94,-113,94,94,94,94,94,94,-113,94,94,-113,-113,-113,-113,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,-113,94,94,94,94,94,]),'MESSAGE':([78,203,204,],[115,115,115,]),'PLUS':([82,84,86,87,88,89,90,113,126,129,130,131,132,133,134,135,137,178,179,182,183,188,198,217,218,220,221,222,223,224,237,253,254,255,256,257,258,268,],[123,-111,-112,-129,-131,-133,-128,123,-107,-130,-132,-110,-114,-116,-118,-119,-127,-115,-117,-137,-123,123,-104,-111,-111,-112,-112,123,-137,-122,-103,-105,-106,-108,-109,-134,-121,-120,]),'COMMA':([82,83,84,86,87,88,89,90,98,99,113,115,116,122,125,126,129,130,131,132,133,134,135,137,141,143,157,159,160,178,179,182,183,198,216,217,218,219,220,221,223,224,229,237,253,254,255,256,257,258,268,],[-136,-136,-111,-112,-129,-131,-133,-128,-22,-23,-67,-73,-74,172,175,-107,-130,-132,-110,-114,-116,-118,-119,-127,187,189,201,203,204,-115,-117,-137,-123,-104,-100,-111,-111,-102,-112,-112,-137,-122,-21,-103,-105,-106,-108,-109,-134,-121,-120,]),'GREATER':([82,83,84,86,87,88,89,90,119,122,125,126,129,130,131,132,133,134,135,137,178,179,182,183,198,216,217,218,219,220,221,223,224,237,253,254,255,256,257,258,268,],[-136,-136,-111,-112,-129,-131,-133,-128,164,-99,-101,-107,-130,-132,-110,-114,-116,-118,-119,-127,-115,-117,-137,-123,-104,-100,-111,-111,-102,-112,-112,-137,-122,-103,-105,-106,-108,-109,-134,-121,-120,]),'GREATER_EQ':([82,83,84,86,87,88,89,90,119,122,125,126,129,130,131,132,133,134,135,137,178,179,182,183,198,216,217,218,219,220,221,223,224,237,253,254,255,256,257,258,268,],[-136,-136,-111,-112,-129,-131,-133,-128,165,-99,-101,-107,-130,-132,-110,-114,-116,-118,-119,-127,-115,-117,-137,-123,-104,-100,-111,-111,-102,-112,-112,-137,-122,-103,-105,-106,-108,-109,-134,-121,-120,]),'LESSER':([82,83,84,86,87,88,89,90,119,122,125,126,129,130,131,132,133,134,135,137,178,179,182,183,198,216,217,218,219,220,221,223,224,237,253,254,255,256,257,258,268,],[-136,-136,-111,-112,-129,-131,-133,-128,166,-99,-101,-107,-130,-132,-110,-114,-116,-118,-119,-127,-115,-117,-137,-123,-104,-100,-111,-111,-102,-112,-112,-137,-122,-103,-105,-106,-108,-109,-134,-121,-120,]),'LESSER_EQ':([82,83,84,86,87,88,89,90,119,122,125,126,129,130,131,132,133,134,135,137,178,179,182,183,198,216,217,218,219,220,221,223,224,237,253,254,255,256,257,258,268,],[-136,-136,-111,-112,-129,-131,-133,-128,167,-99,-101,-107,-130,-132,-110,-114,-116,-118,-119,-127,-115,-117,-137,-123,-104,-100,-111,-111,-102,-112,-112,-137,-122,-103,-105,-106,-108,-109,-134,-121,-120,]),'COMPARE':([82,83,84,86,87,88,89,90,119,122,125,126,129,130,131,132,133,134,135,137,178,179,182,183,198,216,217,218,219,220,221,223,224,237,253,254,255,256,257,258,268,],[-136,-136,-111,-112,-129,-131,-133,-128,168,-99,-101,-107,-130,-132,-110,-114,-116,-118,-119,-127,-115,-117,-137,-123,-104,-100,-111,-111,-102,-112,-112,-137,-122,-103,-105,-106,-108,-109,-134,-121,-120,]),'DIFFERENT':([82,83,84,86,87,88,89,90,119,122,125,126,129,130,131,132,133,134,135,137,178,179,182,183,198,216,217,218,219,220,221,223,224,237,253,254,255,256,257,258,268,],[-136,-136,-111,-112,-129,-131,-133,-128,169,-99,-101,-107,-130,-132,-110,-114,-116,-118,-119,-127,-115,-117,-137,-123,-104,-100,-111,-111,-102,-112,-112,-137,-122,-103,-105,-106,-108,-109,-134,-121,-120,]),'RBRACK':([82,83,84,86,87,88,89,90,122,125,126,129,130,131,132,133,134,135,137,150,178,179,182,183,188,198,216,217,218,219,220,221,222,223,224,237,253,254,255,256,257,258,268,],[-136,-136,-111,-112,-129,-131,-133,-128,-99,-101,-107,-130,-132,-110,-114,-116,-118,-119,-127,195,-115,-117,-137,-123,229,-104,-100,-111,-111,-102,-112,-112,257,-137,-122,-103,-105,-106,-108,-109,-134,-121,-120,]),'AND':([82,83,84,86,87,88,89,90,118,122,125,126,129,130,131,132,133,134,135,137,178,179,182,183,198,208,209,210,211,212,213,216,217,218,219,220,221,223,224,237,245,246,247,248,249,250,253,254,255,256,257,258,268,],[-136,-136,-111,-112,-129,-131,-133,-128,162,-99,-101,-107,-130,-132,-110,-114,-116,-118,-119,-127,-115,-117,-137,-123,-104,-93,-93,-93,-93,-93,-93,-100,-111,-111,-102,-112,-112,-137,-122,-103,-87,-88,-89,-90,-91,-92,-105,-106,-108,-109,-134,-121,-120,]),'OR':([82,83,84,86,87,88,89,90,118,122,125,126,129,130,131,132,133,134,135,137,178,179,182,183,198,208,209,210,211,212,213,216,217,218,219,220,221,223,224,237,245,246,247,248,249,250,253,254,255,256,257,258,268,],[-136,-136,-111,-112,-129,-131,-133,-128,163,-99,-101,-107,-130,-132,-110,-114,-116,-118,-119,-127,-115,-117,-137,-123,-104,-93,-93,-93,-93,-93,-93,-100,-111,-111,-102,-112,-112,-137,-122,-103,-87,-88,-89,-90,-91,-92,-105,-106,-108,-109,-134,-121,-120,]),'TO':([82,83,84,86,87,88,89,90,122,125,126,129,130,131,132,133,134,135,137,178,179,182,183,198,215,216,217,218,219,220,221,223,224,237,252,253,254,255,256,257,258,268,],[-136,-136,-111,-112,-129,-131,-133,-128,-99,-101,-107,-130,-132,-110,-114,-116,-118,-119,-127,-115,-117,-137,-123,-104,-96,-100,-111,-111,-102,-112,-112,-137,-122,-103,267,-105,-106,-108,-109,-134,-121,-120,]),'DO':([82,83,84,86,87,88,89,90,122,125,126,129,130,131,132,133,134,135,137,178,179,182,183,198,214,216,217,218,219,220,221,223,224,237,251,253,254,255,256,257,258,268,275,281,],[-136,-136,-111,-112,-129,-131,-133,-128,-99,-101,-107,-130,-132,-110,-114,-116,-118,-119,-127,-115,-117,-137,-123,-104,-82,-100,-111,-111,-102,-112,-112,-137,-122,-103,266,-105,-106,-108,-109,-134,-121,-120,-97,287,]),'TIMES':([84,86,87,88,89,90,129,130,131,132,133,134,135,137,178,179,182,183,198,217,218,220,221,223,224,237,255,256,257,258,268,],[127,-112,-129,-131,-133,-128,-130,-132,-110,-114,-116,-118,-119,-127,-115,-117,-137,-123,-104,127,127,-112,-112,-137,-122,-103,-108,-109,-134,-121,-120,]),'DIVIDE':([84,86,87,88,89,90,129,130,131,132,133,134,135,137,178,179,182,183,198,217,218,220,221,223,224,237,255,256,257,258,268,],[128,-112,-129,-131,-133,-128,-130,-132,-110,-114,-116,-118,-119,-127,-115,-117,-137,-123,-104,128,128,-112,-112,-137,-122,-103,-108,-109,-134,-121,-120,]),'THEN':([161,205,],[-77,242,]),'ELSE':([279,],[285,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program_structure':([0,],[1,]),'initiate':([2,],[3,]),'addfun':([4,95,],[5,138,]),'addprog':([5,],[6,]),'declare_var':([7,14,],[8,25,]),'changescope':([7,8,],[9,12,]),'functions':([9,12,104,147,],[13,22,148,193,]),'declare_fun':([9,12,104,147,],[14,14,14,14,]),'changeback':([10,23,24,34,],[16,35,36,60,]),'multitypes':([11,140,],[17,186,]),'type':([11,140,226,288,],[18,18,260,260,]),'return_type':([15,],[27,]),'addtype':([18,27,260,],[33,57,270,]),'statutes':([26,37,39,40,42,43,44,45,46,96,145,146,190,265,274,291,293,],[38,63,65,66,67,68,69,70,71,139,191,192,231,273,280,294,295,]),'assign':([26,37,39,40,42,43,44,45,46,96,145,146,190,265,274,291,293,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'call_void':([26,37,39,40,42,43,44,45,46,96,145,146,190,265,274,291,293,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'returning':([26,37,39,40,42,43,44,45,46,96,145,146,190,265,274,291,293,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'reading':([26,37,39,40,42,43,44,45,46,96,145,146,190,265,274,291,293,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'writing':([26,37,39,40,42,43,44,45,46,96,145,146,190,265,274,291,293,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'decision':([26,37,39,40,42,43,44,45,46,96,145,146,190,265,274,291,293,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'conditional':([26,37,39,40,42,43,44,45,46,96,145,146,190,265,274,291,293,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'nonconditional':([26,37,39,40,42,43,44,45,46,96,145,146,190,265,274,291,293,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'special2':([26,37,39,40,42,43,44,45,46,96,145,146,190,265,274,291,293,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'pushid':([47,90,],[72,135,]),'call':([47,90,],[73,136,]),'exprp':([48,54,73,76,78,79,91,105,106,110,120,136,162,163,164,165,166,167,168,169,171,172,175,203,204,264,267,],[74,83,107,83,83,83,137,83,83,83,83,182,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'loopquad':([53,],[80,]),'exprs':([54,76,78,79,105,106,110,120,162,163,164,165,166,167,168,169,171,172,175,203,204,264,267,],[81,111,116,119,149,150,154,119,119,119,208,209,210,211,212,213,215,216,219,116,116,272,275,]),'expr':([54,76,77,78,79,105,106,110,120,142,162,163,164,165,166,167,168,169,171,172,175,180,201,203,204,264,267,],[82,82,113,82,82,82,82,82,82,188,82,82,82,82,82,82,82,82,82,82,82,222,113,82,82,82,82,]),'term':([54,76,77,78,79,105,106,110,120,142,162,163,164,165,166,167,168,169,171,172,173,174,175,180,201,203,204,264,267,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,217,218,84,84,84,84,84,84,84,]),'factor':([54,76,77,78,79,105,106,110,120,142,162,163,164,165,166,167,168,169,171,172,173,174,175,176,177,180,201,203,204,264,267,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,220,221,86,86,86,86,86,86,]),'special1':([54,76,77,78,79,105,106,110,120,142,162,163,164,165,166,167,168,169,171,172,173,174,175,176,177,180,201,203,204,264,267,],[91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,]),'multivars':([59,187,189,277,],[97,228,230,282,]),'dimvars':([59,187,189,277,],[99,99,99,99,]),'endfunc':([64,103,185,232,233,261,],[104,147,227,262,263,271,]),'sconfirm2':([74,],[109,]),'pushop':([75,108,123,124,127,128,181,],[110,110,173,174,176,177,110,]),'read_opt':([77,201,],[112,239,]),'write_opt':([78,203,204,],[114,240,241,]),'logic':([79,120,],[117,170,]),'relation':([79,120,162,163,],[118,118,206,207,]),'forquad1':([81,],[121,]),'pams':([82,83,],[122,125,]),'quad1':([84,217,218,],[126,253,254,]),'quad2':([86,220,221,],[131,255,256,]),'pushint':([87,],[132,]),'pushfloat':([88,],[133,]),'pushchar':([89,],[134,]),'addvar':([98,],[141,]),'addvard':([99,],[143,]),'confirm':([107,152,182,223,],[151,197,224,258,]),'returnquad':([111,],[155,]),'readquad':([113,],[157,]),'writequad1':([115,],[159,]),'writequad2':([116,],[160,]),'pushintn':([129,],[178,]),'pushfloatn':([130,],[179,]),'sconfirm1':([137,],[183,]),'assignment':([149,272,],[194,278,]),'ifquad':([161,],[205,]),'paramstatus':([184,259,],[226,269,]),'verif':([195,257,],[235,268,]),'popop':([198,],[237,]),'logicquad':([206,207,208,209,210,211,212,213,],[243,244,245,246,247,248,249,250,]),'whilequad':([214,],[251,]),'forquad2':([215,],[252,]),'params':([226,288,],[259,292,]),'forquad3':([275,],[281,]),'filljump':([279,297,],[284,299,]),'elsequad':([285,],[289,]),'endquad':([286,],[290,]),'forquad4':([296,],[298,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program_structure","S'",1,None,None,None),
  ('program_structure -> PROGRAM initiate ID addfun addprog SEMI declare_var changescope functions MAIN changeback LPAREN RPAREN LCURLY statutes RCURLY endfunc','program_structure',17,'p_program_structure','Parser.py',32),
  ('program_structure -> PROGRAM initiate ID addfun addprog SEMI declare_var changescope MAIN changeback LPAREN RPAREN LCURLY statutes RCURLY endfunc','program_structure',16,'p_program_structure','Parser.py',33),
  ('program_structure -> PROGRAM initiate ID addfun addprog SEMI changescope functions MAIN changeback LPAREN RPAREN LCURLY statutes RCURLY endfunc','program_structure',16,'p_program_structure','Parser.py',34),
  ('program_structure -> PROGRAM initiate ID addfun addprog SEMI MAIN changeback LPAREN RPAREN LCURLY statutes RCURLY endfunc','program_structure',14,'p_program_structure','Parser.py',35),
  ('addprog -> <empty>','addprog',0,'p_addprog','Parser.py',38),
  ('initiate -> <empty>','initiate',0,'p_initiate','Parser.py',42),
  ('addfun -> <empty>','addfun',0,'p_addfun','Parser.py',57),
  ('changescope -> <empty>','changescope',0,'p_changescope','Parser.py',98),
  ('changeback -> <empty>','changeback',0,'p_changeback','Parser.py',102),
  ('type -> INT','type',1,'p_type','Parser.py',114),
  ('type -> FLOAT','type',1,'p_type','Parser.py',115),
  ('type -> CHAR','type',1,'p_type','Parser.py',116),
  ('declare_var -> VARS multitypes','declare_var',2,'p_declare_var','Parser.py',120),
  ('multitypes -> type addtype COLON multivars SEMI','multitypes',5,'p_multitypes','Parser.py',123),
  ('multitypes -> type addtype COLON multivars SEMI multitypes','multitypes',6,'p_multitypes','Parser.py',124),
  ('addtype -> <empty>','addtype',0,'p_addtype','Parser.py',127),
  ('multivars -> ID addvar','multivars',2,'p_multivars','Parser.py',133),
  ('multivars -> ID addvar COMMA multivars','multivars',4,'p_multivars','Parser.py',134),
  ('multivars -> dimvars addvard','multivars',2,'p_multivars','Parser.py',135),
  ('multivars -> dimvars addvard COMMA multivars','multivars',4,'p_multivars','Parser.py',136),
  ('dimvars -> ID LBRACK expr RBRACK','dimvars',4,'p_dimvars','Parser.py',139),
  ('addvar -> <empty>','addvar',0,'p_addvar','Parser.py',143),
  ('addvard -> <empty>','addvard',0,'p_addvard','Parser.py',186),
  ('return_type -> INT','return_type',1,'p_return_type','Parser.py',236),
  ('return_type -> FLOAT','return_type',1,'p_return_type','Parser.py',237),
  ('return_type -> CHAR','return_type',1,'p_return_type','Parser.py',238),
  ('return_type -> VOID','return_type',1,'p_return_type','Parser.py',239),
  ('declare_fun -> FUNCTION return_type addtype ID addfun LPAREN RPAREN','declare_fun',7,'p_declare_fun','Parser.py',243),
  ('declare_fun -> FUNCTION return_type addtype ID addfun LPAREN paramstatus params paramstatus RPAREN','declare_fun',10,'p_declare_fun','Parser.py',244),
  ('functions -> declare_fun declare_var LCURLY statutes RCURLY endfunc','functions',6,'p_functions','Parser.py',247),
  ('functions -> declare_fun LCURLY statutes RCURLY endfunc','functions',5,'p_functions','Parser.py',248),
  ('functions -> declare_fun declare_var LCURLY statutes RCURLY endfunc functions','functions',7,'p_functions','Parser.py',249),
  ('functions -> declare_fun LCURLY statutes RCURLY endfunc functions','functions',6,'p_functions','Parser.py',250),
  ('endfunc -> <empty>','endfunc',0,'p_endfunc','Parser.py',253),
  ('paramstatus -> <empty>','paramstatus',0,'p_paramstatus','Parser.py',265),
  ('params -> type addtype COLON multivars','params',4,'p_params','Parser.py',272),
  ('params -> type addtype COLON multivars SEMI params','params',6,'p_params','Parser.py',273),
  ('statutes -> assign','statutes',1,'p_statutes','Parser.py',276),
  ('statutes -> assign statutes','statutes',2,'p_statutes','Parser.py',277),
  ('statutes -> call_void','statutes',1,'p_statutes','Parser.py',278),
  ('statutes -> call_void statutes','statutes',2,'p_statutes','Parser.py',279),
  ('statutes -> returning','statutes',1,'p_statutes','Parser.py',280),
  ('statutes -> reading','statutes',1,'p_statutes','Parser.py',281),
  ('statutes -> reading statutes','statutes',2,'p_statutes','Parser.py',282),
  ('statutes -> writing','statutes',1,'p_statutes','Parser.py',283),
  ('statutes -> writing statutes','statutes',2,'p_statutes','Parser.py',284),
  ('statutes -> decision','statutes',1,'p_statutes','Parser.py',285),
  ('statutes -> decision statutes','statutes',2,'p_statutes','Parser.py',286),
  ('statutes -> conditional','statutes',1,'p_statutes','Parser.py',287),
  ('statutes -> conditional statutes','statutes',2,'p_statutes','Parser.py',288),
  ('statutes -> nonconditional','statutes',1,'p_statutes','Parser.py',289),
  ('statutes -> nonconditional statutes','statutes',2,'p_statutes','Parser.py',290),
  ('assign -> ID pushid EQUALS exprs assignment SEMI','assign',6,'p_assign','Parser.py',293),
  ('assign -> ID pushid LBRACK exprs RBRACK verif EQUALS exprs assignment SEMI','assign',10,'p_assign','Parser.py',294),
  ('assignment -> <empty>','assignment',0,'p_assignment','Parser.py',297),
  ('call_void -> ID call exprp confirm SEMI','call_void',5,'p_call_void','Parser.py',315),
  ('call_void -> ID call LPAREN RPAREN confirm SEMI','call_void',6,'p_call_void','Parser.py',316),
  ('call_void -> special2 exprp sconfirm2 SEMI','call_void',4,'p_call_void','Parser.py',317),
  ('special2 -> REGRESION','special2',1,'p_special2','Parser.py',320),
  ('special2 -> PLOT','special2',1,'p_special2','Parser.py',321),
  ('sconfirm2 -> <empty>','sconfirm2',0,'p_sconfirm2','Parser.py',325),
  ('returning -> RETURN LPAREN exprs returnquad RPAREN SEMI','returning',6,'p_returning','Parser.py',352),
  ('returnquad -> <empty>','returnquad',0,'p_returnquad','Parser.py',355),
  ('reading -> READ LPAREN read_opt RPAREN SEMI','reading',5,'p_reading','Parser.py',373),
  ('read_opt -> expr readquad','read_opt',2,'p_read_opt','Parser.py',376),
  ('read_opt -> expr readquad COMMA read_opt','read_opt',4,'p_read_opt','Parser.py',377),
  ('readquad -> <empty>','readquad',0,'p_readquad','Parser.py',380),
  ('writing -> WRITE LPAREN write_opt RPAREN SEMI','writing',5,'p_writing','Parser.py',387),
  ('write_opt -> MESSAGE writequad1','write_opt',2,'p_write_opt','Parser.py',390),
  ('write_opt -> MESSAGE writequad1 COMMA write_opt','write_opt',4,'p_write_opt','Parser.py',391),
  ('write_opt -> exprs writequad2','write_opt',2,'p_write_opt','Parser.py',392),
  ('write_opt -> exprs writequad2 COMMA write_opt','write_opt',4,'p_write_opt','Parser.py',393),
  ('writequad1 -> <empty>','writequad1',0,'p_writequad1','Parser.py',396),
  ('writequad2 -> <empty>','writequad2',0,'p_writequad2','Parser.py',405),
  ('decision -> IF LPAREN logic RPAREN ifquad THEN LCURLY statutes RCURLY filljump','decision',10,'p_decision','Parser.py',415),
  ('decision -> IF LPAREN logic RPAREN ifquad THEN LCURLY statutes RCURLY ELSE elsequad LCURLY statutes RCURLY filljump','decision',15,'p_decision','Parser.py',416),
  ('ifquad -> <empty>','ifquad',0,'p_ifquad','Parser.py',419),
  ('elsequad -> <empty>','elsequad',0,'p_elsequad','Parser.py',431),
  ('filljump -> <empty>','filljump',0,'p_filljump','Parser.py',439),
  ('conditional -> WHILE loopquad LPAREN logic RPAREN whilequad DO LCURLY statutes RCURLY endquad','conditional',11,'p_conditional','Parser.py',444),
  ('loopquad -> <empty>','loopquad',0,'p_loopquad','Parser.py',447),
  ('whilequad -> <empty>','whilequad',0,'p_whilequad','Parser.py',451),
  ('endquad -> <empty>','endquad',0,'p_endquad','Parser.py',463),
  ('logic -> relation AND relation logicquad','logic',4,'p_logic','Parser.py',471),
  ('logic -> relation OR relation logicquad','logic',4,'p_logic','Parser.py',472),
  ('logic -> relation','logic',1,'p_logic','Parser.py',473),
  ('relation -> exprs GREATER exprs logicquad','relation',4,'p_relation','Parser.py',476),
  ('relation -> exprs GREATER_EQ exprs logicquad','relation',4,'p_relation','Parser.py',477),
  ('relation -> exprs LESSER exprs logicquad','relation',4,'p_relation','Parser.py',478),
  ('relation -> exprs LESSER_EQ exprs logicquad','relation',4,'p_relation','Parser.py',479),
  ('relation -> exprs COMPARE exprs logicquad','relation',4,'p_relation','Parser.py',480),
  ('relation -> exprs DIFFERENT exprs logicquad','relation',4,'p_relation','Parser.py',481),
  ('logicquad -> <empty>','logicquad',0,'p_logicquad','Parser.py',484),
  ('nonconditional -> FOR exprs forquad1 EQUALS exprs forquad2 TO exprs forquad3 DO LCURLY statutes RCURLY forquad4','nonconditional',14,'p_nonconditional','Parser.py',564),
  ('forquad1 -> <empty>','forquad1',0,'p_forquad1','Parser.py',567),
  ('forquad2 -> <empty>','forquad2',0,'p_forquad2','Parser.py',575),
  ('forquad3 -> <empty>','forquad3',0,'p_forquad3','Parser.py',615),
  ('forquad4 -> <empty>','forquad4',0,'p_forquad4','Parser.py',654),
  ('exprs -> expr pams','exprs',2,'p_exprs','Parser.py',684),
  ('exprs -> expr pams COMMA exprs','exprs',4,'p_exprs','Parser.py',685),
  ('exprs -> exprp pams','exprs',2,'p_exprs','Parser.py',686),
  ('exprs -> exprp pams COMMA exprs','exprs',4,'p_exprs','Parser.py',687),
  ('exprp -> LPAREN pushop exprs RPAREN popop','exprp',5,'p_exprp','Parser.py',690),
  ('popop -> <empty>','popop',0,'p_popop','Parser.py',693),
  ('expr -> expr PLUS pushop term quad1','expr',5,'p_expr','Parser.py',697),
  ('expr -> expr MINUS pushop term quad1','expr',5,'p_expr','Parser.py',698),
  ('expr -> term quad1','expr',2,'p_expr','Parser.py',699),
  ('term -> term TIMES pushop factor quad2','term',5,'p_term','Parser.py',702),
  ('term -> term DIVIDE pushop factor quad2','term',5,'p_term','Parser.py',703),
  ('term -> factor quad2','term',2,'p_term','Parser.py',704),
  ('quad1 -> <empty>','quad1',0,'p_quad1','Parser.py',707),
  ('quad2 -> <empty>','quad2',0,'p_quad2','Parser.py',759),
  ('pushop -> <empty>','pushop',0,'p_pushop','Parser.py',811),
  ('factor -> C_INT pushint','factor',2,'p_factor','Parser.py',815),
  ('factor -> MINUS C_INT pushintn','factor',3,'p_factor','Parser.py',816),
  ('factor -> C_FLOAT pushfloat','factor',2,'p_factor','Parser.py',817),
  ('factor -> MINUS C_FLOAT pushfloatn','factor',3,'p_factor','Parser.py',818),
  ('factor -> C_CHAR pushchar','factor',2,'p_factor','Parser.py',819),
  ('factor -> ID pushid','factor',2,'p_factor','Parser.py',820),
  ('factor -> ID pushid LBRACK expr RBRACK verif','factor',6,'p_factor','Parser.py',821),
  ('factor -> ID call LPAREN RPAREN confirm','factor',5,'p_factor','Parser.py',822),
  ('factor -> ID call exprp confirm','factor',4,'p_factor','Parser.py',823),
  ('factor -> special1 exprp sconfirm1','factor',3,'p_factor','Parser.py',824),
  ('special1 -> MEDIA','special1',1,'p_special1','Parser.py',827),
  ('special1 -> MODA','special1',1,'p_special1','Parser.py',828),
  ('special1 -> VARIANZA','special1',1,'p_special1','Parser.py',829),
  ('sconfirm1 -> <empty>','sconfirm1',0,'p_sconfirm1','Parser.py',833),
  ('pushid -> <empty>','pushid',0,'p_pushid','Parser.py',866),
  ('pushint -> <empty>','pushint',0,'p_pushint','Parser.py',875),
  ('pushintn -> <empty>','pushintn',0,'p_pushintn','Parser.py',886),
  ('pushfloat -> <empty>','pushfloat',0,'p_pushfloat','Parser.py',897),
  ('pushfloatn -> <empty>','pushfloatn',0,'p_pushfloatn','Parser.py',908),
  ('pushchar -> <empty>','pushchar',0,'p_pushchar','Parser.py',919),
  ('verif -> <empty>','verif',0,'p_verif','Parser.py',930),
  ('call -> <empty>','call',0,'p_call','Parser.py',995),
  ('pams -> <empty>','pams',0,'p_pams','Parser.py',1009),
  ('confirm -> <empty>','confirm',0,'p_confirm','Parser.py',1031),
]
